generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URI")
}

// ENUMS
enum Status {
  ACTIVE
  INACTIVE
  DELETED
  TO_BE_DELETED
}


model User {
  id              String           @id @default(uuid())
  username        String           @unique
  email           String           @unique
  password        String
  fullName        String
  profilePicture  String           @default("")
  bio             String           @default("")
  isPrivate       Boolean          @default(false)
  dateOfBirth     DateTime?
  lastActive      DateTime?
  gender          String?
  location        String?
  interests       String[]         @default([])
  
 // followers       User[]           @relation("Followers", references: [id])
 // followings      User[]           @relation("Followings", references: [id])
  followRequests  FriendRequest[]  @relation("ReceivedRequests")
  sentRequests    FriendRequest[]  @relation("SentRequests")
 // blockedUsers    User[]           @relation("BlockedUsers", references: [id])

  posts           Post[]
  comments        Comment[]

  refreshToken    String           @default("")

  status          Status           @default(ACTIVE)

  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model Post {
  id           String       @id @default(uuid())
  userId       String
  user         User         @relation(fields: [userId], references: [id])

  description  String
  type         PostType
  textContent  String?
  media        String[]     @default([])
 // likes        User[]       @relation("PostLikes", references: [id])
  likeCount    Int          @default(0)
  comments     Comment[]
  location     String?
  isHidden     Boolean      @default(false)
  hashtags     String[]     @default([])
  views        Int          @default(0)

  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Comment {
  id        String    @id @default(uuid())
  userId    String
  postId    String
  user      User      @relation(fields: [userId], references: [id])
  post      Post      @relation(fields: [postId], references: [id])

  content   String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model FriendRequest {
  id          String    @id @default(uuid())
  senderId    String
  receiverId  String
  sender      User      @relation("SentRequests", fields: [senderId], references: [id])
  receiver    User      @relation("ReceivedRequests", fields: [receiverId], references: [id])

  status      FriendRequestStatus @default(PENDING)

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum PostType {
  TEXT
  IMAGE
  VIDEO
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}